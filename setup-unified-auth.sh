#!/bin/bash

# Service Translate - Unified Authentication Setup
# This script configures the WebSocket server to use AWS Cognito for admin authentication

set -e  # Exit on error

# Cleanup function
cleanup_on_error() {
    if [ $? -ne 0 ]; then
        print_error "Setup failed. Cleaning up partial changes..."
        [ -f "src/websocket-server/.env.tmp" ] && rm -f "src/websocket-server/.env.tmp"
    fi
}

trap cleanup_on_error EXIT

echo "=========================================="
echo "Service Translate - Unified Auth Setup"
echo "=========================================="
echo ""

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored messages
print_error() {
    echo -e "${RED}ERROR: $1${NC}"
}

print_success() {
    echo -e "${GREEN}SUCCESS: $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}WARNING: $1${NC}"
}

print_info() {
    echo "INFO: $1"
}

# Function to check if AWS CLI is installed
check_aws_cli() {
    if ! command -v aws &> /dev/null; then
        print_error "AWS CLI is not installed"
        echo "Please install AWS CLI: https://aws.amazon.com/cli/"
        exit 1
    fi
    print_success "AWS CLI is installed"
}

# Function to check AWS credentials
check_aws_credentials() {
    if ! aws sts get-caller-identity &> /dev/null; then
        print_error "AWS credentials are not configured"
        echo "Please configure AWS credentials using 'aws configure'"
        exit 1
    fi
    print_success "AWS credentials are configured"
}

# Function to get CDK output
get_cdk_output() {
    local stack_name="$1"
    local output_key="$2"
    
    aws cloudformation describe-stacks \
        --stack-name "$stack_name" \
        --query "Stacks[0].Outputs[?OutputKey=='$output_key'].OutputValue" \
        --output text 2>/dev/null || echo ""
}

# Function to list available CDK stacks
list_cdk_stacks() {
    print_info "Available CloudFormation stacks:"
    aws cloudformation list-stacks \
        --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE \
        --query 'StackSummaries[*].[StackName,StackStatus]' \
        --output table
}

# Function to validate Cognito User Pool exists
validate_cognito_pool() {
    local user_pool_id="$1"
    local region="$2"
    
    if aws cognito-idp describe-user-pool \
        --user-pool-id "$user_pool_id" \
        --region "$region" &> /dev/null; then
        print_success "Cognito User Pool validated: $user_pool_id"
        return 0
    else
        print_error "Cognito User Pool not found: $user_pool_id"
        return 1
    fi
}

# Function to create .env file
create_env_file() {
    local region="$1"
    local user_pool_id="$2"
    local client_id="$3"
    local port="${4:-3001}"
    local env_file="src/websocket-server/.env"
    
    print_info "Creating .env file at $env_file"
    
    cat > "$env_file" << EOF
# AWS Cognito Configuration
# Generated by setup-unified-auth.sh on $(date)
COGNITO_REGION=$region
COGNITO_USER_POOL_ID=$user_pool_id
COGNITO_CLIENT_ID=$client_id

# Admin Identity Persistence
ADMIN_IDENTITIES_DIR=./admin-identities
ADMIN_IDENTITY_CLEANUP_ENABLED=true
ADMIN_IDENTITY_RETENTION_DAYS=90

# Session Configuration
SESSION_PERSISTENCE_DIR=./sessions
SESSION_TIMEOUT_MINUTES=480
SESSION_CLEANUP_ENABLED=true

# WebSocket Server Configuration
WS_PORT=$port

# Logging
LOG_LEVEL=info
EOF
    
    print_success ".env file created successfully"
}

# Function to validate password complexity
validate_password() {
    local password="$1"
    
    if [ ${#password} -lt 8 ]; then
        print_error "Password must be at least 8 characters"
        return 1
    fi
    
    if ! echo "$password" | grep -q '[A-Z]'; then
        print_error "Password must contain at least one uppercase letter"
        return 1
    fi
    
    if ! echo "$password" | grep -q '[a-z]'; then
        print_error "Password must contain at least one lowercase letter"
        return 1
    fi
    
    if ! echo "$password" | grep -q '[0-9]'; then
        print_error "Password must contain at least one number"
        return 1
    fi
    
    return 0
}

# Function to create required directories
create_directories() {
    print_info "Creating required directories..."
    
    mkdir -p src/websocket-server/admin-identities
    mkdir -p src/websocket-server/sessions
    mkdir -p src/websocket-server/logs
    
    print_success "Directories created"
}

# Function to create Cognito user
create_cognito_user() {
    local user_pool_id="$1"
    local region="$2"
    local email="$3"
    local password="$4"
    
    print_info "Creating Cognito user: $email"
    
    # Create user with temporary password first
    local temp_password=$(openssl rand -base64 12)
    
    if aws cognito-idp admin-create-user \
        --user-pool-id "$user_pool_id" \
        --username "$email" \
        --user-attributes Name=email,Value="$email",Name=email_verified,Value=true \
        --temporary-password "$temp_password" \
        --message-action SUPPRESS \
        --region "$region" &> /dev/null; then
        
        # Set permanent password (password never appears in process list)
        if echo "$password" | aws cognito-idp admin-set-user-password \
            --user-pool-id "$user_pool_id" \
            --username "$email" \
            --password "$(cat)" \
            --permanent \
            --region "$region" &> /dev/null; then
            
            print_success "Cognito user created: $email"
            return 0
        else
            print_error "Failed to set permanent password"
            return 1
        fi
    else
        print_error "Failed to create Cognito user"
        return 1
    fi
}

# Main setup flow
main() {
    echo "Step 1: Checking prerequisites..."
    echo ""
    
    check_aws_cli
    check_aws_credentials
    
    echo ""
    echo "Step 2: Obtaining Cognito configuration..."
    echo ""
    
    # Try to get configuration from CDK output
    print_info "Attempting to retrieve Cognito configuration from CDK stack..."
    
    # Common stack name patterns
    STACK_NAMES=(
        "ServiceTranslateStack"
        "service-translate-stack"
        "ServiceTranslate"
        "TranslateStack"
    )
    
    COGNITO_REGION=""
    COGNITO_USER_POOL_ID=""
    COGNITO_CLIENT_ID=""
    
    for stack_name in "${STACK_NAMES[@]}"; do
        print_info "Checking stack: $stack_name"
        
        user_pool_id=$(get_cdk_output "$stack_name" "UserPoolId")
        client_id=$(get_cdk_output "$stack_name" "UserPoolClientId")
        region=$(get_cdk_output "$stack_name" "Region")
        
        if [ -n "$user_pool_id" ] && [ -n "$client_id" ]; then
            COGNITO_USER_POOL_ID="$user_pool_id"
            COGNITO_CLIENT_ID="$client_id"
            COGNITO_REGION="${region:-us-east-1}"
            print_success "Found Cognito configuration in stack: $stack_name"
            break
        fi
    done
    
    # If not found in CDK output, prompt user
    if [ -z "$COGNITO_USER_POOL_ID" ]; then
        print_warning "Could not automatically retrieve Cognito configuration from CDK"
        echo ""
        echo "Please provide Cognito configuration manually."
        echo "You can find these values in:"
        echo "  1. AWS Console > Cognito > User Pools"
        echo "  2. CDK deployment output"
        echo "  3. CloudFormation stack outputs"
        echo ""
        
        list_cdk_stacks
        echo ""
        
        read -p "Enter AWS Region (e.g., us-east-1): " COGNITO_REGION
        read -p "Enter Cognito User Pool ID (e.g., us-east-1_xxxxxx): " COGNITO_USER_POOL_ID
        read -p "Enter Cognito Client ID: " COGNITO_CLIENT_ID
    fi
    
    # Validate inputs
    if [ -z "$COGNITO_REGION" ] || [ -z "$COGNITO_USER_POOL_ID" ] || [ -z "$COGNITO_CLIENT_ID" ]; then
        print_error "Missing required Cognito configuration"
        print_error "All three values are required: REGION, USER_POOL_ID, CLIENT_ID"
        exit 1
    fi
    
    # Validate format
    if [[ ! "$COGNITO_USER_POOL_ID" =~ ^[a-z]+-[a-z]+-[0-9]+_[a-zA-Z0-9]+$ ]]; then
        print_warning "User Pool ID format looks incorrect (expected: region_xxxxxx)"
    fi
    
    echo ""
    echo "Step 3: Validating Cognito configuration..."
    echo ""
    
    if ! validate_cognito_pool "$COGNITO_USER_POOL_ID" "$COGNITO_REGION"; then
        print_error "Cognito User Pool validation failed"
        echo ""
        echo "Please verify:"
        echo "  1. The User Pool ID is correct"
        echo "  2. The region is correct"
        echo "  3. Your AWS credentials have access to the User Pool"
        exit 1
    fi
    
    echo ""
    echo "Step 4: Creating configuration files..."
    echo ""
    
    # Prompt for port
    read -p "Enter WebSocket server port (default: 3001): " WS_PORT
    WS_PORT=${WS_PORT:-3001}
    
    create_env_file "$COGNITO_REGION" "$COGNITO_USER_POOL_ID" "$COGNITO_CLIENT_ID" "$WS_PORT"
    
    echo ""
    echo "Step 5: Creating required directories..."
    echo ""
    
    create_directories
    
    echo ""
    echo "Step 6: Optional - Create Cognito admin user..."
    echo ""
    
    read -p "Do you want to create a new Cognito admin user? (y/N): " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo ""
        read -p "Enter admin email: " ADMIN_EMAIL
        
        # Validate email format
        if [[ ! "$ADMIN_EMAIL" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
            print_error "Invalid email format"
            exit 1
        fi
        
        read -s -p "Enter admin password (min 8 chars, must include uppercase, lowercase, number): " ADMIN_PASSWORD
        echo ""
        read -s -p "Confirm admin password: " ADMIN_PASSWORD_CONFIRM
        echo ""
        
        if [ "$ADMIN_PASSWORD" != "$ADMIN_PASSWORD_CONFIRM" ]; then
            print_error "Passwords do not match"
            exit 1
        fi
        
        if ! validate_password "$ADMIN_PASSWORD"; then
            exit 1
        fi
        
        echo ""
        create_cognito_user "$COGNITO_USER_POOL_ID" "$COGNITO_REGION" "$ADMIN_EMAIL" "$ADMIN_PASSWORD"
    else
        print_info "Skipping user creation"
        echo ""
        print_warning "Make sure you have at least one user in the Cognito User Pool"
        echo "You can create users via:"
        echo "  1. AWS Console > Cognito > User Pools > Users"
        echo "  2. AWS CLI: aws cognito-idp admin-create-user"
    fi
    
    echo ""
    echo "=========================================="
    print_success "Setup Complete!"
    echo "=========================================="
    echo ""
    echo "Configuration Summary:"
    echo "  Region:        $COGNITO_REGION"
    echo "  User Pool ID:  $COGNITO_USER_POOL_ID"
    echo "  Client ID:     $COGNITO_CLIENT_ID"
    echo ""
    echo "Next Steps:"
    echo "  1. Install dependencies:"
    echo "     cd src/websocket-server && npm install"
    echo ""
    echo "  2. Start WebSocket server:"
    echo "     cd src/websocket-server && npm start"
    echo ""
    echo "  3. Start Capture app:"
    echo "     cd src/capture && npm start"
    echo ""
    echo "  4. Login with your Cognito credentials"
    echo ""
    echo "Important Notes:"
    echo "  - All Cognito users in the User Pool can authenticate as admins"
    echo "  - Tokens are stored securely (encrypted on client, memory-only on server)"
    echo "  - Sessions persist across server restarts"
    echo "  - Admin identities are created automatically on first login"
    echo ""
    echo "For more information, see:"
    echo "  - ADMIN_AUTHENTICATION_GUIDE.md"
    echo "  - src/websocket-server/COGNITO_SETUP.md"
    echo ""
}

# Run main function
main
